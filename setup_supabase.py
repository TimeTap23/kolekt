#!/usr/bin/env python3
"""
Supabase Configuration Setup Script
Helps configure your Supabase database for ThreadStorm
"""

import os
import sys
from pathlib import Path

def create_supabase_env():
    """Create or update .env file with Supabase credentials"""
    
    print("üóÑÔ∏è Kolekt Supabase Configuration Setup")
    print("=" * 50)
    
    # Check if .env file exists
    env_file = Path(".env")
    env_content = ""
    
    if env_file.exists():
        print("üìÅ Found existing .env file")
        with open(env_file, 'r') as f:
            env_content = f.read()
    else:
        print("üìÅ Creating new .env file")
    
    # Get Supabase credentials
    print("\nüîó Supabase Configuration:")
    print("-" * 30)
    print("You can find these in your Supabase project dashboard:")
    print("1. Go to https://supabase.com/dashboard")
    print("2. Select your project")
    print("3. Go to Settings > API")
    
    supabase_url = input("Enter your Supabase Project URL: ").strip()
    supabase_anon_key = input("Enter your Supabase Anon Key: ").strip()
    supabase_service_role_key = input("Enter your Supabase Service Role Key: ").strip()
    
    # Generate database URL
    if supabase_url:
        # Extract project ref from URL
        if supabase_url.endswith('/'):
            supabase_url = supabase_url[:-1]
        
        # Create database URL
        project_ref = supabase_url.split('/')[-1]
        database_url = f"postgresql://postgres:[YOUR-PASSWORD]@db.{project_ref}.supabase.co:5432/postgres"
        
        print(f"\nüìù Generated Database URL: {database_url}")
        print("‚ö†Ô∏è  You'll need to replace [YOUR-PASSWORD] with your actual database password")
        
        db_password = input("Enter your database password: ").strip()
        if db_password:
            database_url = f"postgresql://postgres:{db_password}@db.{project_ref}.supabase.co:5432/postgres"
    else:
        database_url = input("Enter your Database URL (if different): ").strip()
    
    # Update or create .env content
    env_lines = env_content.split('\n') if env_content else []
    env_dict = {}
    
    # Parse existing .env content
    for line in env_lines:
        if '=' in line and not line.startswith('#'):
            key, value = line.split('=', 1)
            env_dict[key.strip()] = value.strip()
    
    # Update with Supabase values
    env_dict['SUPABASE_URL'] = supabase_url
    env_dict['SUPABASE_ANON_KEY'] = supabase_anon_key
    env_dict['SUPABASE_KEY'] = supabase_service_role_key
    env_dict['DATABASE_URL'] = database_url
    
    # Write updated .env file
    with open(env_file, 'w') as f:
        f.write("# Kolekt Environment Configuration\n")
        f.write("# Generated by setup_supabase.py\n\n")
        
        # Write Supabase configuration
        f.write("# Supabase Configuration\n")
        f.write(f"SUPABASE_URL={env_dict.get('SUPABASE_URL', '')}\n")
        f.write(f"SUPABASE_ANON_KEY={env_dict.get('SUPABASE_ANON_KEY', '')}\n")
        f.write(f"SUPABASE_KEY={env_dict.get('SUPABASE_KEY', '')}\n")
        f.write(f"DATABASE_URL={env_dict.get('DATABASE_URL', '')}\n\n")
        
        # Write existing Meta configuration if it exists
        if env_dict.get('META_APP_ID'):
            f.write("# Meta Platform Configuration\n")
            f.write(f"META_APP_ID={env_dict.get('META_APP_ID', '')}\n")
            f.write(f"META_APP_SECRET={env_dict.get('META_APP_SECRET', '')}\n")
            f.write(f"META_REDIRECT_URI={env_dict.get('META_REDIRECT_URI', '')}\n")
            f.write("META_WEBHOOK_VERIFY_TOKEN=your-webhook-verify-token\n\n")
        
        if env_dict.get('THREADS_APP_ID'):
            f.write("# Threads API Configuration\n")
            f.write(f"THREADS_APP_ID={env_dict.get('THREADS_APP_ID', '')}\n")
            f.write(f"THREADS_APP_SECRET={env_dict.get('THREADS_APP_SECRET', '')}\n")
            f.write("THREADS_API_KEY=your-threads-api-key\n")
            f.write("THREADS_API_SECRET=your-threads-api-secret\n\n")
        
        # Write other required configurations
        f.write("# Required Configuration\n")
        f.write("SECRET_KEY=your-super-secret-jwt-key-here\n")
        f.write("DEBUG=True\n")
        f.write("REDIS_URL=redis://localhost:6379\n\n")
        
        # Write optional configurations
        f.write("# Optional Configuration\n")
        f.write("SMTP_SERVER=smtp.gmail.com\n")
        f.write("SMTP_PORT=587\n")
        f.write("SMTP_USERNAME=your-email@gmail.com\n")
        f.write("SMTP_PASSWORD=your-app-password\n")
    
    print(f"\n‚úÖ Supabase configuration saved to {env_file}")
    print("\nüìã Next Steps:")
    print("1. Run the database schema: python setup_database.py")
    print("2. Test the configuration: python test_supabase.py")
    print("3. Start Kolekt: python main.py")
    
    return True

def validate_supabase_credentials():
    """Validate that Supabase credentials are properly configured"""
    
    print("\nüîç Validating Supabase Credentials...")
    
    # Check if .env file exists
    if not Path(".env").exists():
        print("‚ùå .env file not found. Run setup first.")
        return False
    
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    # Check required variables
    required_vars = [
        'SUPABASE_URL',
        'SUPABASE_ANON_KEY',
        'SUPABASE_KEY',
        'DATABASE_URL'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Missing required Supabase variables: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ All required Supabase credentials are configured")
    
    # Test Supabase credentials format
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_anon_key = os.getenv('SUPABASE_ANON_KEY')
    supabase_service_key = os.getenv('SUPABASE_KEY')
    
    if supabase_url and not supabase_url.startswith('https://'):
        print("‚ö†Ô∏è  Supabase URL should start with 'https://'")
    
    if supabase_anon_key and len(supabase_anon_key) < 50:
        print("‚ö†Ô∏è  Supabase Anon Key seems too short. Please verify.")
    
    if supabase_service_key and len(supabase_service_key) < 50:
        print("‚ö†Ô∏è  Supabase Service Role Key seems too short. Please verify.")
    
    return True

def show_supabase_setup_instructions():
    """Show instructions for setting up Supabase"""
    
    print("\nüìö Supabase Setup Instructions:")
    print("=" * 40)
    print("1. Go to https://supabase.com/")
    print("2. Sign up or log in to your account")
    print("3. Create a new project or select existing project")
    print("4. Go to Settings > API")
    print("5. Copy the following values:")
    print("   - Project URL")
    print("   - Anon Key (public)")
    print("   - Service Role Key (secret)")
    print("6. Go to Settings > Database")
    print("7. Copy your database password")
    print("8. Run this script to configure Kolekt")

def main():
    """Main setup function"""
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "validate":
            validate_supabase_credentials()
        elif command == "instructions":
            show_supabase_setup_instructions()
        else:
            print("Usage: python setup_supabase.py [validate|instructions]")
    else:
        # Interactive setup
        try:
            create_supabase_env()
            print("\n" + "=" * 50)
            validate_supabase_credentials()
        except KeyboardInterrupt:
            print("\n\n‚ùå Setup cancelled")
        except Exception as e:
            print(f"\n‚ùå Setup failed: {e}")

if __name__ == "__main__":
    main()
