#!/usr/bin/env python3
"""
Script to help update the Kolekt database schema
This script will show you the SQL commands to run in your Supabase dashboard
"""

import os
from pathlib import Path

def main():
    print("üóÑÔ∏è Kolekt Database Schema Update")
    print("=" * 50)
    
    # Read the schema file
    schema_path = Path(__file__).parent / "supabase_schema.sql"
    
    if not schema_path.exists():
        print("‚ùå supabase_schema.sql not found")
        return
    
    with open(schema_path, 'r') as f:
        schema_content = f.read()
    
    print("üìã Database Schema Update Required")
    print("=" * 50)
    print("The admin panel requires additional database tables and columns.")
    print("Please follow these steps:")
    print()
    print("1. Go to your Supabase dashboard:")
    print("   https://supabase.com/dashboard")
    print()
    print("2. Select your Kolekt project")
    print()
    print("3. Go to SQL Editor")
    print()
    print("4. Copy and paste the following SQL commands:")
    print()
    print("-" * 50)
    print("-- Add missing columns to profiles table")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS email VARCHAR(255);")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS name VARCHAR(100);")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'pro', 'business', 'admin'));")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS plan VARCHAR(20) DEFAULT 'free' CHECK (plan IN ('free', 'pro', 'business'));")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT true;")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS is_verified BOOLEAN DEFAULT false;")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS last_login TIMESTAMP WITH TIME ZONE;")
    print("ALTER TABLE public.profiles ADD COLUMN IF NOT EXISTS login_count INTEGER DEFAULT 0;")
    print()
    print("-- Create refresh_tokens table")
    print("CREATE TABLE IF NOT EXISTS public.refresh_tokens (")
    print("    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,")
    print("    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,")
    print("    token_hash VARCHAR(255) NOT NULL,")
    print("    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,")
    print("    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()")
    print(");")
    print()
    print("-- Create api_usage table")
    print("CREATE TABLE IF NOT EXISTS public.api_usage (")
    print("    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,")
    print("    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,")
    print("    endpoint VARCHAR(255) NOT NULL,")
    print("    calls_count INTEGER DEFAULT 0,")
    print("    last_called TIMESTAMP WITH TIME ZONE DEFAULT NOW(),")
    print("    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),")
    print("    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()")
    print(");")
    print()
    print("-- Create announcements table")
    print("CREATE TABLE IF NOT EXISTS public.announcements (")
    print("    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,")
    print("    title VARCHAR(255) NOT NULL,")
    print("    content TEXT NOT NULL,")
    print("    priority VARCHAR(20) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'critical')),")
    print("    is_active BOOLEAN DEFAULT true,")
    print("    created_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,")
    print("    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),")
    print("    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),")
    print("    expires_at TIMESTAMP WITH TIME ZONE")
    print(");")
    print()
    print("-- Create indexes")
    print("CREATE INDEX IF NOT EXISTS idx_refresh_tokens_user_id ON public.refresh_tokens(user_id);")
    print("CREATE INDEX IF NOT EXISTS idx_refresh_tokens_token_hash ON public.refresh_tokens(token_hash);")
    print("CREATE INDEX IF NOT EXISTS idx_api_usage_user_id ON public.api_usage(user_id);")
    print("CREATE INDEX IF NOT EXISTS idx_api_usage_endpoint ON public.api_usage(endpoint);")
    print("CREATE INDEX IF NOT EXISTS idx_announcements_is_active ON public.announcements(is_active);")
    print("CREATE INDEX IF NOT EXISTS idx_announcements_priority ON public.announcements(priority);")
    print("CREATE INDEX IF NOT EXISTS idx_announcements_created_at ON public.announcements(created_at);")
    print()
    print("-- Enable RLS")
    print("ALTER TABLE public.refresh_tokens ENABLE ROW LEVEL SECURITY;")
    print("ALTER TABLE public.api_usage ENABLE ROW LEVEL SECURITY;")
    print("ALTER TABLE public.announcements ENABLE ROW LEVEL SECURITY;")
    print()
    print("-- Create RLS policies")
    print("CREATE POLICY \"Users can manage their own refresh tokens\" ON public.refresh_tokens")
    print("    FOR ALL USING (auth.uid() = user_id);")
    print()
    print("CREATE POLICY \"Users can view their own API usage\" ON public.api_usage")
    print("    FOR SELECT USING (auth.uid() = user_id);")
    print("CREATE POLICY \"Users can update their own API usage\" ON public.api_usage")
    print("    FOR UPDATE USING (auth.uid() = user_id);")
    print("CREATE POLICY \"Users can insert their own API usage\" ON public.api_usage")
    print("    FOR INSERT WITH CHECK (auth.uid() = user_id);")
    print()
    print("CREATE POLICY \"Admins can manage announcements\" ON public.announcements")
    print("    FOR ALL USING (")
    print("        EXISTS (")
    print("            SELECT 1 FROM public.profiles")
    print("            WHERE id = auth.uid() AND role = 'admin'")
    print("        )")
    print("    );")
    print()
    print("-- Create triggers")
    print("CREATE TRIGGER update_api_usage_updated_at")
    print("    BEFORE UPDATE ON public.api_usage")
    print("    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();")
    print()
    print("CREATE TRIGGER update_announcements_updated_at")
    print("    BEFORE UPDATE ON public.announcements")
    print("    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();")
    print("-" * 50)
    print()
    print("5. Click 'Run' to execute the SQL commands")
    print()
    print("6. After the schema is updated, run:")
    print("   python create_admin.py")
    print()
    print("‚úÖ Your database will then be ready for the admin panel!")

if __name__ == "__main__":
    main()
