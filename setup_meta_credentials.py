#!/usr/bin/env python3
"""
Meta and Threads Credentials Setup Script
Helps configure your Meta and Threads app credentials for ThreadStorm
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create or update .env file with Meta/Threads credentials"""
    
    print("üîê ThreadStorm Meta/Threads Credentials Setup")
    print("=" * 50)
    
    # Check if .env file exists
    env_file = Path(".env")
    env_content = ""
    
    if env_file.exists():
        print("üìÅ Found existing .env file")
        with open(env_file, 'r') as f:
            env_content = f.read()
    else:
        print("üìÅ Creating new .env file")
    
    # Get Meta credentials
    print("\nüì± Meta App Configuration:")
    print("-" * 30)
    
    meta_app_id = input("Enter your Meta App ID: ").strip()
    meta_app_secret = input("Enter your Meta App Secret: ").strip()
    
    # Get Threads credentials (separate from Meta)
    print("\nüßµ Threads App Configuration:")
    print("-" * 30)
    print("Note: Threads has its own separate App ID and App Secret")
    
    threads_app_id = input("Enter your Threads App ID: ").strip()
    threads_app_secret = input("Enter your Threads App Secret: ").strip()
    
    # Get redirect URI
    print("\nüåê OAuth Redirect URI:")
    print("-" * 30)
    print("This should match what you configured in your Meta app")
    default_redirect = "http://localhost:8000/api/v1/auth/meta/callback"
    redirect_uri = input(f"Enter redirect URI (default: {default_redirect}): ").strip()
    if not redirect_uri:
        redirect_uri = default_redirect
    
    # Update or create .env content
    env_lines = env_content.split('\n') if env_content else []
    env_dict = {}
    
    # Parse existing .env content
    for line in env_lines:
        if '=' in line and not line.startswith('#'):
            key, value = line.split('=', 1)
            env_dict[key.strip()] = value.strip()
    
    # Update with new values
    env_dict['META_APP_ID'] = meta_app_id
    env_dict['META_APP_SECRET'] = meta_app_secret
    env_dict['META_REDIRECT_URI'] = redirect_uri
    
    if threads_app_id:
        env_dict['THREADS_APP_ID'] = threads_app_id
    if threads_app_secret:
        env_dict['THREADS_APP_SECRET'] = threads_app_secret
    
    # Write updated .env file
    with open(env_file, 'w') as f:
        f.write("# ThreadStorm Environment Configuration\n")
        f.write("# Generated by setup_meta_credentials.py\n\n")
        
        # Write Meta configuration
        f.write("# Meta Platform Configuration\n")
        f.write(f"META_APP_ID={env_dict.get('META_APP_ID', '')}\n")
        f.write(f"META_APP_SECRET={env_dict.get('META_APP_SECRET', '')}\n")
        f.write(f"META_REDIRECT_URI={env_dict.get('META_REDIRECT_URI', '')}\n")
        f.write("META_WEBHOOK_VERIFY_TOKEN=your-webhook-verify-token\n\n")
        
        # Write Threads configuration if provided
        if threads_app_id or threads_app_secret:
            f.write("# Threads API Configuration\n")
            f.write(f"THREADS_APP_ID={env_dict.get('THREADS_APP_ID', '')}\n")
            f.write(f"THREADS_APP_SECRET={env_dict.get('THREADS_APP_SECRET', '')}\n\n")
        
        # Write other required configurations
        f.write("# Required Configuration\n")
        f.write("SECRET_KEY=your-super-secret-jwt-key-here\n")
        f.write("SUPABASE_URL=your-supabase-url\n")
        f.write("SUPABASE_KEY=your-supabase-service-role-key\n")
        f.write("SUPABASE_ANON_KEY=your-supabase-anon-key\n")
        f.write("DATABASE_URL=your-supabase-database-url\n\n")
        
        # Write optional configurations
        f.write("# Optional Configuration\n")
        f.write("DEBUG=True\n")
        f.write("REDIS_URL=redis://localhost:6379\n")
        f.write("SMTP_SERVER=smtp.gmail.com\n")
        f.write("SMTP_PORT=587\n")
        f.write("SMTP_USERNAME=your-email@gmail.com\n")
        f.write("SMTP_PASSWORD=your-app-password\n")
    
    print(f"\n‚úÖ Configuration saved to {env_file}")
    print("\nüìã Next Steps:")
    print("1. Update your Meta app settings in the Meta Developer Console")
    print("2. Add the redirect URI to your Meta app's OAuth settings")
    print("3. Configure your app's permissions (threads_basic, threads_content_publish)")
    print("4. Run 'python main.py' to start ThreadStorm")
    
    return True

def validate_credentials():
    """Validate that credentials are properly configured"""
    
    print("\nüîç Validating Credentials...")
    
    # Check if .env file exists
    if not Path(".env").exists():
        print("‚ùå .env file not found. Run setup first.")
        return False
    
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    # Check required variables
    required_vars = [
        'META_APP_ID',
        'META_APP_SECRET',
        'META_REDIRECT_URI',
        'SECRET_KEY',
        'SUPABASE_URL',
        'SUPABASE_KEY',
        'SUPABASE_ANON_KEY',
        'DATABASE_URL'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Missing required environment variables: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ All required credentials are configured")
    
    # Test Meta credentials format
    meta_app_id = os.getenv('META_APP_ID')
    meta_app_secret = os.getenv('META_APP_SECRET')
    
    if meta_app_id and len(meta_app_id) < 10:
        print("‚ö†Ô∏è  Meta App ID seems too short. Please verify.")
    
    if meta_app_secret and len(meta_app_secret) < 20:
        print("‚ö†Ô∏è  Meta App Secret seems too short. Please verify.")
    
    return True

def show_meta_setup_instructions():
    """Show instructions for setting up Meta app"""
    
    print("\nüìö Meta App Setup Instructions:")
    print("=" * 40)
    print("1. Go to https://developers.facebook.com/")
    print("2. Create a new app or use existing app")
    print("3. Add 'Threads API' product to your app")
    print("4. Configure OAuth settings:")
    print("   - Add redirect URI: http://localhost:8000/api/v1/auth/meta/callback")
    print("   - Enable OAuth login")
    print("5. Request permissions:")
    print("   - threads_basic")
    print("   - threads_content_publish")
    print("6. Submit app for review (required for production)")
    print("7. Copy App ID and App Secret to your .env file")

def main():
    """Main setup function"""
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "validate":
            validate_credentials()
        elif command == "instructions":
            show_meta_setup_instructions()
        else:
            print("Usage: python setup_meta_credentials.py [validate|instructions]")
    else:
        # Interactive setup
        try:
            create_env_file()
            print("\n" + "=" * 50)
            validate_credentials()
        except KeyboardInterrupt:
            print("\n\n‚ùå Setup cancelled")
        except Exception as e:
            print(f"\n‚ùå Setup failed: {e}")

if __name__ == "__main__":
    main()
